doctype html
html
	head
		meta(charset='utf-8')
		meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
		title Introduction to security design

		link(rel='stylesheet', type='text/css', href='build/build.css')

	body

		article.deck

			section
				h1 Introduction to security design

			section
				h2 AJ
				h3 he/him
				h3 Winter 2 batch 
				h3 Security/privacy

			section(data-bespoke-hash='covering')
				h2 What we're covering
				h3 tl;dr: system-level stuff
				ul
					li.bullet How common security vulnerabilities work
					li.bullet Mitigating them
					li.bullet Reducing their impact

			section(data-bespoke-hash='not-covering')
				h2 What we're <strong>not</strong> covering
				ul
					li.bullet Application-level vulnerabilites
					li.bullet Secure distribution
					li.bullet Operational security
					li.bullet Cryptography
					li.bullet Responsible disclosure

			section
				h2 Secure programming
				h3.bullet Secure programs are subsets of correct programs
				h3.bullet No program is 100% correct
				h3.bullet Hence: security bugs

			section
				h2 Memory safety bugs
				h3 Use-after-frees
				h3 Dangling pointers
				h3 Buffer overflows

			section
				h2 Moar bugs!
				h3 Race conditions
				h3 Resource leaks

			section
				h2.bullet Example: buffer overflows
				h3.bullet When a program writes past the end of a buffer
				h3.bullet The write <em>overflows</em> out of the allocated memory region

			section
				h2.bullet Stack-based exploitation (aka stack smashing)
				h3.bullet Based on overwriting something
				h3.bullet Security-critical information: e.g. a variable in a stack frame
				h3.bullet Execution-related pointers: e.g. function pointers, stack frame return addresses, exception handlers

			section
				h2.bullet Easiest solution: memory-safe languages
				h3.bullet Python, Ruby, JavaScript, etc. - already memory-safe
				h3.bullet C and C++ -> Rust

			section
				h2.bullet Otherwise: tools
				h3.bullet Valgrind
				h3.bullet Your compiler (<code>-fstack-protector[-all]</code>)
				h3.bullet OS tools (e.g. memory junking, ASLR)
				h3.bullet Don't make your tools useless (Heartbleed)

			section
				h2.bullet Also helpful: reducing attack surface
				h3.bullet Attack surface = how much of your program is exposed to attack
				h3.bullet If your program doesn't ever encounter an attacker, that's zero attack surface
				h3.bullet Example: Tor Browser's security slider

			section
				h2.bullet Other bugs besides memory safety
				h3.bullet Assume your program will be compromised
				h3.bullet Preventative measures

			section
				h2.bullet Principle of least privilege
				h3.bullet Makes sense if you assume security bugs
				h3.bullet Obvious example: don't run things as root

			section(data-bespoke-hash='privilege-separation')
				h2.bullet Dropping privileges
				h3.bullet Start as root
				h3.bullet Do some stuff (e.g. bind to a restricted port)
				h3.bullet Set the user the program's running under to an unprivileged user
				h3.bullet <code>nobody</code>

			section
				h2.bullet Dividing your program up
				h3.bullet Multiple processes
				h3.bullet Multiple security domains
				h3.bullet Each restricted as much as possible

			section
				h2.bullet Example: ntpd
				h3.bullet Sets the time of day (requires root)
				h3.bullet Speaks UDP to time servers
				h3.bullet Queries the DNS

			section
				h2.bullet ntpd drawing

			section
				h2.bullet Good example: Chrome

			section
				h2.bullet Validation
				h3.bullet Make sure requests make sense
				h3.bullet
					a(href="https://en.wikipedia.org/wiki/Confused_deputy_problem") Confused deputy attack

			section(data-bespoke-hash='chroot-jails')
				h2.bullet chroot jails
				q Chroot() causes <code>dirname</code> to become the root directory, that is, the starting point for path searches of pathnames beginning with `/'.
				cite - <code>chroot(2)</code>
				h3.bullet Restrict which parts of the filesystem can be used

			section
				h2.bullet <code>chroot</code> example - setup
				code
					pre.
						$ pwd
						/tmp

						$ ls /home
						alex

						$ mkdir chroot-jail/{,bin,lib,lib64}

						$ for i in bin lib lib64; do
						>   sudo mount --bind /$i chroot-jail/$i
						> done
						[sudo] password for alex:

			section.emphatic
				h2.bullet <code>chroot</code> example - setup
				code
					pre.
						$ tree chroot-jail
						chroot-jail
						├── bin
						│   ├── bash
						[...]
						│   └── zsh5
						└── lib
						    ├── cpp -> /etc/alternatives/cpp
						[...]
						│   └── libxt_udp.so
						└── lib64
						    └── ld-linux-x86-64.so.2 -> /lib/[...]

						2311 directories, 10645 files

			section
				h2.bullet <code>chroot</code> example - jailing
				code
					pre.
						$ sudo chroot chroot-jail

						# pwd
						/

						# ls /home
						ls: cannot access /home: No such file or directory

						# ls /
						bin  lib  lib64

						# exit

						$ pwd
						/tmp

			section.emphatic
				h2.bullet We prevented ourselves from accessing <code>/home</code>

			section
				h2.bullet Using
				h3.bullet Normally programs don't need this setup
				h3.bullet Secure coding: have your program put itself in a jail
				h3.bullet Note: root can break out of chroot jails
				h3.bullet There are more tools, but they're not portable

			section
				h2.bullet Almost fin
				h3.bullet In general, just remember: your program <strong>will<strong> get pwnd
				h3.bullet (But still try to mitigate exploits and reduce attack surface)
				h3.bullet Audits
				h3.bullet Final notes: anything the 
					a(href="https://openbsd.org/") OpenBSD
					|  guys do is excellent
				h3.bullet
					a(href='http://www.ranum.com/security/computer_security/editorials/dumb/') Six dumbest ideas in computer security

			section
				h2.bullet Fin

			section
				h2.bullet Access this presentation again
				h3.bullet
					a(href='https://strugee.net/presentation-security-design') https://strugee.net/presentation-security-design
				h3.bullet Or get the 
					a(href='https://github.com/strugee/presentation-security-design') source code

		script(src='build/build.js')
